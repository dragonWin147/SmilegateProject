{"version":3,"sources":["file:///Users/brian/Work/C++/App/ClientCocos/assets/Scripts/GameController.ts"],"names":["_decorator","Component","EditBox","Label","log","Node","tween","SocketHandler","LobbyText","ccclass","property","GameController","_token","getInstance","instance","onLoad","connectToServer","showNotify","content","lbNotify","string","onLogin","name","edbUserName","pass","edbPass","NAME_LOGIN_EMPTY","PASS_LOGIN_EMPTY","message","method","data","user","sendMessage","JSON","stringify","showError","errorCode","reason","onPlayGame","token","resultLogin","dataLogin","loginNode","active","gameNode","resultPlayGame","dataPlay","lbName","username","node","to","flashEffect","functionSound","duration","opacity","getComponent","UIOpacity","addComponent","t","repeat","call","start"],"mappings":"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","sourcesContent":["import { _decorator, Component, EditBox, Label, log, Node, tween } from 'cc';\nimport { DataLogin, DataPlayGame, SocketHandler } from './SocketHandler';\nimport { LobbyText } from './LobbyText';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameController')\nexport class GameController extends Component {\n    @property(EditBox)\n    edbUserName!: EditBox;\n\n    @property(EditBox)\n    edbPass!: EditBox;\n\n    @property(Label)\n    lbNotify!: Label;\n\n    @property(Label)\n    lbName!: Label;\n\n    @property(Node)\n    loginNode!: Node;\n\n    @property(Node)\n    gameNode!: Node;\n\n    private _token: string = \"\";\n    private static instance: GameController = null;\n\n    public static getInstance() {\n        return this.instance;\n    }\n\n    onLoad() {\n        SocketHandler.getInstance().connectToServer();\n        GameController.instance = this;\n    }\n\n    showNotify(content: string) {\n        this.lbNotify.string = content;\n    }\n\n    onLogin() {\n        let name = this.edbUserName.string;\n        let pass = this.edbPass.string;\n\n        if (name == \"\") {\n            this.showNotify(LobbyText.NAME_LOGIN_EMPTY);\n            return;\n        }\n\n        if (pass == \"\") {\n            this.showNotify(LobbyText.PASS_LOGIN_EMPTY);\n            return;\n        }\n\n        this.showNotify(\"\");\n\n        const message = {\n            method: \"LOGIN\",\n            data: {\n                user: name,\n                pass: pass\n            }\n        };\n\n        SocketHandler.getInstance().sendMessage(JSON.stringify(message))\n    }\n\n\n\n\n    showError(errorCode: number, reason: string) {\n        log(\"showError\", errorCode);\n        this.showNotify(reason);\n    }\n\n    onPlayGame() {\n        const message = {\n            method: \"PLAY\",\n            data: {\n                token: this._token\n            }\n        };\n\n        SocketHandler.getInstance().sendMessage(JSON.stringify(message))\n    }\n\n\n    // Message\n\n    resultLogin(dataLogin: DataLogin) {\n        log(\"resultLogin\", dataLogin);\n        if (dataLogin.errorCode == 0) {\n            this._token = dataLogin.token;\n            this.loginNode.active = false;\n            this.gameNode.active = true;\n        } else {\n            this.showNotify(dataLogin.reason);\n        }\n    }\n\n    resultPlayGame(dataPlay: DataPlayGame) {\n        log(\"resultPlayGame\", dataPlay);\n        if (dataPlay.errorCode == 0) {\n            this.lbName.string = dataPlay.username + \" is Playing...\";\n            tween(this.lbName.node).to()\n        } else {\n            this.showNotify(dataPlay.reason);\n        }\n    }\n\n    public static flashEffect(node: Node, functionSound: Function = null, duration = 0.5) {\n        let opacity = node.getComponent(UIOpacity);\n        if (!opacity) {\n          opacity = node.addComponent(UIOpacity);\n        }\n        let t = tween(opacity).to(duration, { opacity: 0 }).to(duration, { opacity: 255 });\n        tween(opacity)\n          .repeat(4, t)\n          .call(() => {\n            functionSound && functionSound();\n          })\n          .start();\n      }\n\n}\n\n"]}