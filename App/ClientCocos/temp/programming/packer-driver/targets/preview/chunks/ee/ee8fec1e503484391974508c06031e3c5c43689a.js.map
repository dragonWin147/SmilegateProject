{"version":3,"sources":["file:///Users/brian/Work/C++/ClientCocos/assets/Scripts/SocketHandler.ts"],"names":["DataLogin","_decorator","GameController","ccclass","property","errorCode","reason","token","METHOD","SocketHandler","websocket","getInstance","instance","connectToServer","WebSocket","onopen","console","log","onmessage","event","data","receivedData","JSON","parse","method","LOGIN","resultLogin","onclose","onerror","error","sendMessage","message","readyState","OPEN","send","closeConnection","CONNECTING","close","onDestroy"],"mappings":";;;2GAKaA,S;;;;;;;;;;;;;;;AAJJC,MAAAA,U,OAAAA,U;;AACAC,MAAAA,c,iBAAAA,c;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBH,U;;2BAEjBD,S,GAAN,MAAMA,SAAN,CAAgB;AAAA;AAAA,eACnBK,SADmB;AAAA,eAEnBC,MAFmB;AAAA,eAGnBC,KAHmB;AAAA;;AAAA,O;;wBAMXC,M,0BAAAA,M;AAAAA,QAAAA,M;AAAAA,QAAAA,M;eAAAA,M;;;AAGT;;+BAGUC,a,WADZN,OAAO,CAAC,eAAD,C,2BAAR,MACaM,aADb,CAC2B;AAAA;AAAA,eAUfC,SAVe;AAAA;;AAGE,eAAXC,WAAW,GAAG;AACxB,cAAI,CAAC,KAAKC,QAAV,EAAoB;AAChB,iBAAKA,QAAL,GAAgB,IAAIH,aAAJ,EAAhB;AACH;;AACD,iBAAO,KAAKG,QAAZ;AACH;;AAKDC,QAAAA,eAAe,GAAG;AACd,eAAKH,SAAL,GAAiB,IAAII,SAAJ,CAAc,qBAAd,CAAjB;;AAEA,eAAKJ,SAAL,CAAeK,MAAf,GAAwB,MAAM;AAC1BC,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,WAFD;;AAIA,eAAKP,SAAL,CAAeQ,SAAf,GAA4BC,KAAD,IAAW;AAClCH,YAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCE,KAAK,CAACC,IAAvC;;AACA,gBAAGD,KAAK,CAACC,IAAT,EAAc;AACV,kBAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACC,IAAjB,CAArB;;AACA,sBAAOC,YAAY,CAACG,MAApB;AACI,qBAAKhB,MAAM,CAACiB,KAAZ;AACI;AAAA;AAAA,wDAAed,WAAf,GAA6Be,WAA7B,CAAyCL,YAAY,CAACD,IAAtD;AACJ;AAHJ;AAKH;AACJ,WAVD;;AAYA,eAAKV,SAAL,CAAeiB,OAAf,GAAyB,MAAM;AAC3BX,YAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAD2B,CAE3B;AACH,WAHD;;AAKA,eAAKP,SAAL,CAAekB,OAAf,GAA0BC,KAAD,IAAW;AAChCb,YAAAA,OAAO,CAACa,KAAR,CAAc,QAAd,EAAwBA,KAAxB,EADgC,CAEhC;AACH,WAHD;AAIH,SAzCsB,CA2CvB;;;AACAC,QAAAA,WAAW,CAACC,OAAD,EAAkB;AACzB,cAAI,KAAKrB,SAAL,CAAesB,UAAf,KAA8BlB,SAAS,CAACmB,IAA5C,EAAkD;AAC9C,iBAAKvB,SAAL,CAAewB,IAAf,CAAoBH,OAApB;AACH,WAFD,MAEO;AACHf,YAAAA,OAAO,CAACa,KAAR,CAAc,uBAAd;AACH;AACJ,SAlDsB,CAoDvB;;;AACAM,QAAAA,eAAe,GAAG;AACd,cAAI,KAAKzB,SAAL,CAAesB,UAAf,KAA8BlB,SAAS,CAACmB,IAAxC,IAAgD,KAAKvB,SAAL,CAAesB,UAAf,KAA8BlB,SAAS,CAACsB,UAA5F,EAAwG;AACpG,iBAAK1B,SAAL,CAAe2B,KAAf;AACH;AACJ;;AAGDC,QAAAA,SAAS,GAAG;AACR,eAAKH,eAAL;AACH;;AA9DsB,O,UACRvB,Q,GAA0B,I","sourcesContent":["\nimport { _decorator, Component, Node } from 'cc';\nimport { GameController } from './GameController';\nconst { ccclass, property } = _decorator;\n\nexport class DataLogin {\n    errorCode : number;\n    reason: string;\n    token: string;\n  }\n\nexport enum METHOD {\n    LOGIN = \"LOGIN\",\n    ENTER_GAME = \"ENTER_GAME\",\n  };\n\n@ccclass('SocketHandler')\nexport class SocketHandler {\n    private static instance: SocketHandler = null;\n\n    public static getInstance() {\n        if (!this.instance) {\n            this.instance = new SocketHandler();\n        }\n        return this.instance;\n    }\n\n    private websocket: WebSocket;\n\n\n    connectToServer() {\n        this.websocket = new WebSocket('ws://localhost:9002');\n\n        this.websocket.onopen = () => {\n            console.log('Connected to server');\n        };\n\n        this.websocket.onmessage = (event) => {\n            console.log('Received message:', event.data);\n            if(event.data){\n                const receivedData = JSON.parse(event.data);\n                switch(receivedData.method){\n                    case METHOD.LOGIN:\n                        GameController.getInstance().resultLogin(receivedData.data);\n                    break;\n                }\n            }\n        };\n\n        this.websocket.onclose = () => {\n            console.log('Disconnected from server');\n            // Xử lý khi mất kết nối\n        };\n\n        this.websocket.onerror = (error) => {\n            console.error('Error:', error);\n            // Xử lý khi có lỗi xảy ra\n        };\n    }\n\n    // Gửi tin nhắn đến server\n    sendMessage(message: string) {\n        if (this.websocket.readyState === WebSocket.OPEN) {\n            this.websocket.send(message);\n        } else {\n            console.error('WebSocket is not open');\n        }\n    }\n\n    // Đóng kết nối WebSocket\n    closeConnection() {\n        if (this.websocket.readyState === WebSocket.OPEN || this.websocket.readyState === WebSocket.CONNECTING) {\n            this.websocket.close();\n        }\n    }\n\n\n    onDestroy() {\n        this.closeConnection();\n    }\n}\n\n"]}