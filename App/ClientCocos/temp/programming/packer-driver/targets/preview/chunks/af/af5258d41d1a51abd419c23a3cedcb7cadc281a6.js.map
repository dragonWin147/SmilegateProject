{"version":3,"sources":["file:///Users/brian/Work/C++/ClientCocos/assets/Scripts/SocketHandler.ts"],"names":["_decorator","ccclass","property","SocketHandler","websocket","getInstance","instance","connectToServer","WebSocket","onopen","console","log","send","onmessage","event","data","onclose","onerror","error","sendMessage","message","readyState","OPEN","closeConnection","CONNECTING","close","onDestroy"],"mappings":";;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBF,U;;+BAGjBG,a,WADZF,OAAO,CAAC,eAAD,C,2BAAR,MACaE,aADb,CAC2B;AAAA;AAAA,eAUfC,SAVe;AAAA;;AAGE,eAAXC,WAAW,GAAE;AACvB,cAAG,CAAC,KAAKC,QAAT,EAAkB;AACd,iBAAKA,QAAL,GAAgB,IAAIH,aAAJ,EAAhB;AACH;;AACD,iBAAO,KAAKG,QAAZ;AACH;;AAKDC,QAAAA,eAAe,GAAG;AACd,eAAKH,SAAL,GAAiB,IAAII,SAAJ,CAAc,qBAAd,CAAjB;;AAEA,eAAKJ,SAAL,CAAeK,MAAf,GAAwB,MAAM;AAC1BC,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAD0B,CAE1B;;AACA,iBAAKP,SAAL,CAAeQ,IAAf,CAAoB,mBAApB;AACH,WAJD;;AAMA,eAAKR,SAAL,CAAeS,SAAf,GAA4BC,KAAD,IAAW;AAClCJ,YAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCG,KAAK,CAACC,IAAvC,EADkC,CAElC;AACH,WAHD;;AAKA,eAAKX,SAAL,CAAeY,OAAf,GAAyB,MAAM;AAC3BN,YAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAD2B,CAE3B;AACH,WAHD;;AAKA,eAAKP,SAAL,CAAea,OAAf,GAA0BC,KAAD,IAAW;AAChCR,YAAAA,OAAO,CAACQ,KAAR,CAAc,QAAd,EAAwBA,KAAxB,EADgC,CAEhC;AACH,WAHD;AAIH,SApCsB,CAsCvB;;;AACAC,QAAAA,WAAW,CAACC,OAAD,EAAkB;AACzB,cAAI,KAAKhB,SAAL,CAAeiB,UAAf,KAA8Bb,SAAS,CAACc,IAA5C,EAAkD;AAC9C,iBAAKlB,SAAL,CAAeQ,IAAf,CAAoBQ,OAApB;AACH,WAFD,MAEO;AACHV,YAAAA,OAAO,CAACQ,KAAR,CAAc,uBAAd;AACH;AACJ,SA7CsB,CA+CvB;;;AACAK,QAAAA,eAAe,GAAG;AACd,cAAI,KAAKnB,SAAL,CAAeiB,UAAf,KAA8Bb,SAAS,CAACc,IAAxC,IAAgD,KAAKlB,SAAL,CAAeiB,UAAf,KAA8Bb,SAAS,CAACgB,UAA5F,EAAwG;AACpG,iBAAKpB,SAAL,CAAeqB,KAAf;AACH;AACJ;;AAGDC,QAAAA,SAAS,GAAG;AACR,eAAKH,eAAL;AACH;;AAzDsB,O,UACRjB,Q,GAA0B,I","sourcesContent":["\nimport { _decorator, Component, Node } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('SocketHandler')\nexport class SocketHandler {\n    private static instance: SocketHandler = null;\n\n    public static getInstance(){\n        if(!this.instance){\n            this.instance = new SocketHandler();\n        }\n        return this.instance;\n    }\n\n    private websocket: WebSocket;\n\n   \n    connectToServer() {\n        this.websocket = new WebSocket('ws://localhost:9002');\n\n        this.websocket.onopen = () => {\n            console.log('Connected to server');\n            // Gửi tin nhắn tới server khi kết nối thành công (nếu cần)\n            this.websocket.send('Hello server game');\n        };\n\n        this.websocket.onmessage = (event) => {\n            console.log('Received message:', event.data);\n            // Xử lý dữ liệu từ server khi nhận được tin nhắn\n        };\n\n        this.websocket.onclose = () => {\n            console.log('Disconnected from server');\n            // Xử lý khi mất kết nối\n        };\n\n        this.websocket.onerror = (error) => {\n            console.error('Error:', error);\n            // Xử lý khi có lỗi xảy ra\n        };\n    }\n\n    // Gửi tin nhắn đến server\n    sendMessage(message: string) {\n        if (this.websocket.readyState === WebSocket.OPEN) {\n            this.websocket.send(message);\n        } else {\n            console.error('WebSocket is not open');\n        }\n    }\n\n    // Đóng kết nối WebSocket\n    closeConnection() {\n        if (this.websocket.readyState === WebSocket.OPEN || this.websocket.readyState === WebSocket.CONNECTING) {\n            this.websocket.close();\n        }\n    }\n\n\n    onDestroy() {\n        this.closeConnection();\n    }\n}\n\n"]}