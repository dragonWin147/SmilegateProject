{"version":3,"sources":["file:///Users/brian/Work/C++/App/ClientCocos/assets/Scripts/GameController.ts"],"names":["_decorator","Component","EditBox","Label","log","Node","SocketHandler","LobbyText","ccclass","property","GameController","_token","getInstance","instance","onLoad","connectToServer","showNotify","content","lbNotify","string","onLogin","name","edbUserName","pass","edbPass","NAME_LOGIN_EMPTY","PASS_LOGIN_EMPTY","message","method","data","user","sendMessage","JSON","stringify","showError","errorCode","reason","onPlayGame","token","resultLogin","dataLogin","loginNode","active","gameNode","resultPlayGame"],"mappings":"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","sourcesContent":["import { _decorator, Component, EditBox, Label, log, Node } from 'cc';\nimport { DataLogin, SocketHandler } from './SocketHandler';\nimport { LobbyText } from './LobbyText';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameController')\nexport class GameController extends Component {\n    @property(EditBox)\n    edbUserName!: EditBox;\n\n    @property(EditBox)\n    edbPass!: EditBox;\n\n    @property(Label)\n    lbNotify!: Label;\n\n    @property(Node)\n    loginNode!: Node;\n\n    @property(Node)\n    gameNode!: Node;\n\n    private _token : string = \"\";\n    private static instance: GameController = null;\n\n    public static getInstance() {\n        return this.instance;\n    }\n\n    onLoad() {\n        SocketHandler.getInstance().connectToServer();\n        GameController.instance = this;\n    }\n\n    showNotify(content: string) {\n        this.lbNotify.string = content;\n    }\n\n    onLogin() {\n        let name = this.edbUserName.string;\n        let pass = this.edbPass.string;\n\n        if (name == \"\") {\n            this.showNotify(LobbyText.NAME_LOGIN_EMPTY);\n            return;\n        }\n\n        if (pass == \"\") {\n            this.showNotify(LobbyText.PASS_LOGIN_EMPTY);\n            return;\n        }\n\n        this.showNotify(\"\");\n\n        const message = {\n            method: \"LOGIN\",\n            data: {\n                user: name,\n                pass: pass\n            }\n        };\n\n        SocketHandler.getInstance().sendMessage(JSON.stringify(message))\n    }\n\n   \n\n\n    showError(errorCode: number, reason: string) {\n        log(\"showError\", errorCode);\n        this.showNotify(reason);\n    }\n\n    onPlayGame(){\n        const message = {\n            method: \"PLAY\",\n            data: {\n                token: this._token\n            }\n        };\n\n        SocketHandler.getInstance().sendMessage(JSON.stringify(message))\n    }\n\n\n    // Message\n\n    resultLogin(dataLogin: DataLogin) {\n        log(\"resultLogin\", dataLogin);\n        if (dataLogin.errorCode == 0) {\n            this._token = dataLogin.token;\n            this.loginNode.active = false;\n            this.gameNode.active = true;\n        } else {\n            this.showNotify(dataLogin.reason);\n        }\n    }\n\n    resultPlayGame(dataLogin: DataLogin) {\n        log(\"resultLogin\", dataLogin);\n        if (dataLogin.errorCode == 0) {\n            this._token = dataLogin.token;\n            this.loginNode.active = false;\n            this.gameNode.active = true;\n        } else {\n            this.showNotify(dataLogin.reason);\n        }\n    }\n\n}\n\n"]}